generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Institution {
  id            Int            @id @default(autoincrement())
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  //
  name          String         @unique
  code          String         @unique
  //
  geCategories  GeCategory[]
  courses       Course[]
  articulations Articulation[]
}

model GeCategory {
  id            Int            @id @default(autoincrement())
  updatedAt     DateTime       @updatedAt
  createdAt     DateTime       @default(now())
  //
  category      String
  //
  institution   Institution    @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  institutionId Int
  courses       Course[]
  cvcCourses    CvcFulillsGe[]

  @@unique([institutionId, category])
}

model Course {
  id               Int            @id @default(autoincrement())
  updatedAt        DateTime       @updatedAt
  createdAt        DateTime       @default(now())
  //
  courseCode       String
  courseDepartment String
  courseNumber     String
  courseName       String?        @default("")
  //
  institution      Institution    @relation(fields: [institutionId], references: [id], onDelete: Cascade)
  institutionId    Int
  articulatesFrom  Articulation[]
  geCategories     GeCategory[]

  @@unique([institutionId, courseCode])
}

model CvcCourse {
  id                Int            @id @default(autoincrement())
  updatedAt         DateTime       @updatedAt
  createdAt         DateTime       @default(now())
  //
  college           String
  courseCode        String
  courseName        String
  cvcId             String
  niceToHaves       String[]
  units             Float
  startDate         DateTime
  endDate           DateTime
  async             Boolean
  hasOpenSeats      Boolean
  hasPrereqs        Boolean
  instantEnrollment Boolean
  tuition           Int
  //
  fulfillsGEs       CvcFulillsGe[]
  articulatesTo     Articulation[]

  @@unique([cvcId, courseCode])
}

model CvcFulillsGe {
  id           Int        @id @default(autoincrement())
  updatedAt    DateTime   @updatedAt
  createdAt    DateTime   @default(now())
  //
  count        Int        @default(1)
  //
  cvcCourse    CvcCourse  @relation(fields: [cvcCourseId], references: [id], onDelete: Cascade)
  cvcCourseId  Int
  geCategory   GeCategory @relation(fields: [geCategoryId], references: [id], onDelete: Cascade)
  geCategoryId Int

  @@unique([cvcCourseId, geCategoryId])
}

model Articulation {
  id                 Int          @id @default(autoincrement())
  updatedAt          DateTime     @updatedAt
  createdAt          DateTime     @default(now())
  //
  assistPath         String
  fromCollege        String
  toInstitutionName  String
  fromCoursesStrings String[]
  toCoursesStrings   String[]
  //
  toInstitution      Institution? @relation(fields: [toInstitutionId], references: [id], onDelete: SetNull)
  toInstitutionId    Int?
  from               CvcCourse[]
  to                 Course[]

  @@unique([fromCollege, toInstitutionName, fromCoursesStrings, toCoursesStrings])
}
